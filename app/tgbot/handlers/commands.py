from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from app.tgbot.keyboards.users_board import event_board, main_user_board
from app.infrastructure.database.database.db import DB
from app.models.basemodels import UsersModel, UserRole
import requests
from datetime import datetime

commands_router = Router()


@commands_router.message(Command(commands='start'))
async def proccess_start_command(message: Message, db: DB) -> None:
    user_record: UsersModel | None = await db.users.get_user_record(user_id=message.from_user.id)
    if user_record is None:
        await db.users.add(
            user_id=message.from_user.id,
            role=UserRole.USER,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            username=message.from_user.username,
        )
    await message.answer(text='–ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ event –±–æ—Ç.\n–£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏.',
                         reply_markup=main_user_board())


@commands_router.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(
        '–ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫\n'
        '–ü–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è'
    )

@commands_router.message(F.text == '–°–æ–±—ã—Ç–∏—è üìÜ',)
async def process_event_command(message: Message):
    await message.delete()
    await message.answer(
        '–£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏.', reply_markup=event_board()
    )

@commands_router.message(F.text == '–ü–æ–≥–æ–¥–∞ üåû',)
async def process_weather_command(message: Message):
    await message.delete()
    def timestamp_to_date(timestamp):
        return datetime.fromtimestamp(timestamp).strftime("%d.%m.%Y")
    weather = main_weather()
    # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
    current = weather["current_observation"]
    location = weather["location"]

    await message.answer(
        f"–ì–æ—Ä–æ–¥: {location['city']}, {location['country']}\n"
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {timestamp_to_date(current['pubDate'])}\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current['condition']['temperature']}¬∞C\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {current['condition']['text']}\n"
        f"–í–µ—Ç–µ—Ä: {current['wind']['speed']} –∫–º/—á, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {current['wind']['direction']}\n"
        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['atmosphere']['humidity']}%\n"
        f"–í–∏–¥–∏–º–æ—Å—Ç—å: {current['atmosphere']['visibility']} –∫–º\n"
        f"–î–∞–≤–ª–µ–Ω–∏–µ: {current['atmosphere']['pressure']} –º–±–∞—Ä\n"
        f"–í–æ—Å—Ö–æ–¥: {current['astronomy']['sunrise']}\n"
        f"–ó–∞–∫–∞—Ç: {current['astronomy']['sunset']}\n"
    )


@commands_router.message()
async def send_echo(message: Message):
    try:
        await message.send_copy(chat_id=message.chat.id)
    except TypeError:
        await message.reply(
            text='–î–∞–Ω–Ω—ã–π —Ç–∏–ø –∞–ø–¥–µ–π—Ç–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è '
                 '–º–µ—Ç–æ–¥–æ–º send_copy'
        )

def get_weather(location):
    url = f"https://yahoo-weather5.p.rapidapi.com/weather?location={location}&format=json&u=f"
    headers = {
        "x-rapidapi-host": "yahoo-weather5.p.rapidapi.com",
        "x-rapidapi-key": "f693aebe6emsh24b20d5277b40d4p1dccaajsn867936a8eb25"
    }
    response = requests.get(url, headers=headers)
    data = response.json()
    return data

def main_weather():
    location = "Moscow"
    weather_data = get_weather(location)
    return weather_data